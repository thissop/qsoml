
Currently Loaded Modules:
  1) shared   2) DefaultModules   3) slurm/21.08.8

 


CondaError: Run 'conda init' before 'conda activate'

2025-02-14 11:34:13.030229: I tensorflow/core/util/port.cc:110] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-14 11:34:13.073351: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-02-14 11:34:14.108496: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
/burg/opt/anaconda3-2023.09/lib/python3.11/site-packages/pandas/core/arrays/masked.py:60: UserWarning: Pandas requires version '1.3.6' or newer of 'bottleneck' (version '1.3.5' currently installed).
  from pandas.core import (
[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]
2025-02-14 11:34:17.298803: I tensorflow/core/util/port.cc:110] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-14 11:34:17.340682: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-02-14 11:34:18.333846: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
/burg/opt/anaconda3-2023.09/lib/python3.11/site-packages/pandas/core/arrays/masked.py:60: UserWarning: Pandas requires version '1.3.6' or newer of 'bottleneck' (version '1.3.5' currently installed).
  from pandas.core import (
2025-02-14 11:34:21.174058: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 44333 MB memory:  -> device: 0, name: Quadro RTX 8000, pci bus id: 0000:3b:00.0, compute capability: 7.5
Rest Spectrum Shape Before Processing: [1 9000 1]
Redshift Shape: [1 1]
Wave Redshifted Shape: [1 9000]
Wave Obs Expanded Shape: [1 4500]
Rest Spectrum Shape Before Interpolation: [1 9000]
Traceback (most recent call last):
  File "/burg/home/tjk2147/src/GitHub/qsoml/code/model.py", line 203, in <module>
    output = decoder([dummy_latent, dummy_z])
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/burg/home/tjk2147/.local/lib/python3.11/site-packages/keras/utils/traceback_utils.py", line 70, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "/burg/home/tjk2147/src/GitHub/qsoml/code/model.py", line 151, in transform_spectrum
    obs_spectrum = tf.reshape(obs_spectrum, [batch_size, obs_length, 1])
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tensorflow.python.framework.errors_impl.InvalidArgumentError: Exception encountered when calling layer 'lambda' (type Lambda).

{{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:GPU:0}} Input to reshape is a tensor with 1 values, but the requested shape has 4500 [Op:Reshape]

Call arguments received by layer 'lambda' (type Lambda):
  • inputs=['tf.Tensor(shape=(1, 9000, 1), dtype=float32)', 'tf.Tensor(shape=(1, 1), dtype=float32)']
  • mask=None
  • training=None
